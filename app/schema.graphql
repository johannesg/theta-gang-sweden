schema {
    query: Query
    # mutation: Mutation
}

type Query {
    # me: User
    instruments: [Instrument]
    matrix(id: ID!, type: OptionType!, expires: String!, includeDetails: Boolean): OptionsMatrix
    optionDetails(id: ID!): OptionDetails
}

type Instrument {
    id: ID!
    name: String!
}

type OptionsList {
    underlying: InstrumentDetails
    options: [OptionMatrixItem]
}

type OptionsMatrix {
    underlying: InstrumentDetails
    matrix: [OptionsWithExpiry!]!
}

type OptionsWithExpiry {
    expires: String!
    options: [OptionMatrixItem!]!
}

type InstrumentDetails {
    name: String!
    href: String!
    change: Float
    changePercent: Float
    buyPrice: Float
    sellPrice: Float
    lastPrice: Float
    highestPrice: Float
    lowestPrice: Float
    updated: String
    totalVolumeTraded: Int
}

type OptionMatrixItem {
    call: OptionDetails
    strike: Float
    put: OptionDetails
}

type OptionDetails {
    name: String
    href: String

    type: CallOrPutType
    strike: Float

    changePercent: Float,
    change: Float,

    bid: Float,
    ask: Float,
    spread: Float,
    last: Float,
    high: Float,
    low: Float,
    volume: Int,
    updated: String,
    
    expires: String
    optionType: OptionType
    type: CallOrPutType
    strike: Float,
    parity: Int,

    delta: Float
    theta: Float
    vega: Float
    gamma: Float
    rho: Float
    IV: Float

    interest: Float
}

enum OptionType {
    WEEKLY
    STANDARD
}

enum CallOrPutType {
    CALL
    PUT
}

# type Mutation {
# }
