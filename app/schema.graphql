schema {
    query: Query
    # mutation: Mutation
}

type Query {
    # me: User
    instruments: [Instrument]
    options(id: ID!, type: OptionType!, expires: String!): OptionsList
    optionDetails(id: ID!): OptionDetails
}

type Instrument {
    id: ID!
    name: String!
}

type OptionsList {
    underlying: InstrumentDetails
    options: [OptionMatrixItem]
}

type InstrumentDetails {
    name: String!
    href: String!
    change: Float
    changePercent: Float
    buyPrice: Float
    sellPrice: Float
    lastPrice: Float
    highestPrice: Float
    lowestPrice: Float
    updated: String
    totalVolumeTraded: Int
}

type OptionMatrixItem {
    call: OptionInfo
    strike: Float
    put: OptionInfo
}

type OptionInfo {
    name: String!
    href: String!
    callOrPut: CallOrPutType!
    strike: Float!
    buyVolume: Int
    buy: Float
    sell: Float
    sellVolume: Int
}

type OptionDetails {
    expires: String!
    type: OptionType!
    callOrPut: CallOrPutType!

    buyIV: String
    delta: Float
    theta: Float
    vega: Float
    sellIV: String
    gamma: Float
    rho: Float
    IV: String
}

enum OptionType {
    WEEKLY
    STANDARD
}

enum CallOrPutType {
    CALL
    PUT
}

# type Mutation {
# }
